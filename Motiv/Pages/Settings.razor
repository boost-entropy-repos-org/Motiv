@page "/settings"

<form>
    <div class="border-bottom">
        <h3>Configuration</h3>
    </div>
    <p>
        <i>Use it or lose it</i> - Unused points are frozen if not used within this many days.
        This is to prevent you from saving up points then spending them all at once.
        A value of zero means the points will never be frozen.
        The points not used are still accounted for in the statistics (default: 3 days)
    </p>
    <label for="useOrLose">Use or lose time span (days): </label>
    <input type="text" id="useOrLose" name="useOrLose" placeholder="3" size="3" class="settingsInput" @bind="useOrLose">
</form>
<button @onclick="SaveConfiguration">Save configuration</button>

<br />
<br />

<div class="border-bottom">
    <h3>Data</h3>
</div>
<p>Export/import all saved data. Your data is saved in the browser. To make sure you don't lose your data it's good practise to export and backup regularly.</p>
<form>
    <textarea rows="5" cols="60" name="allData" placeholder="Enter import data here..." class="settingsInput" @bind="allDataTextArea" />
</form>
<button @onclick="ExportAllData">Export</button>
<button @onclick="ImportAllData">Import</button>
<br />
<br />

<p>Export/import the current task setup as a template to share with friends</p>
<form>
    <textarea rows="5" cols="60" name="taskTemplateData" placeholder="Enter import data here..." class="settingsInput" @bind="taskTemplateTextArea" />
</form>
<button @onclick="ExportTaskTemplate">Export</button>
<button @onclick="ImportTaskTemplate">Import</button>
<br />
<br />

<p>Clear all data (warning: cannot be reversed!)</p>
<button @onclick="ClearAllData">Clear all data</button>

@inject Interfaces.ISettingsController settingsController;

@code {
    private int? useOrLose;
    private string allDataTextArea;
    private string taskTemplateTextArea;

    protected override async Task OnInitializedAsync()
    {
        var configuration = await settingsController.LoadConfiguration();
        useOrLose = configuration.UseOrLose;
    }

    private async Task ClearAllData()
    {
        await settingsController.ClearAllData();
    }

    private async Task ExportAllData()
    {
        var allData = await settingsController.ExportAllData();
        allDataTextArea = allData;
    }

    private async Task ImportAllData()
    {
        if (!string.IsNullOrWhiteSpace(allDataTextArea))
        {
            await settingsController.ImportAllData(allDataTextArea);
            allDataTextArea = string.Empty;

            await OnInitializedAsync();
        }
    }

    private async Task ExportTaskTemplate()
    {
        var taskTemplateData = await settingsController.ExportTaskTemplate();
        taskTemplateTextArea = taskTemplateData;
    }

    private async Task ImportTaskTemplate()
    {
        if (!string.IsNullOrWhiteSpace(taskTemplateTextArea))
        {
            await settingsController.ImportTaskTemplate(taskTemplateTextArea);
            taskTemplateTextArea = string.Empty;
        }
    }

    private async Task SaveConfiguration()
    {
        Core.Models.Configuration newConfiguration = new()
        {
            UseOrLose = useOrLose
        };
        await settingsController.SaveConfiguration(newConfiguration);

        useOrLose = null;
    }
}
